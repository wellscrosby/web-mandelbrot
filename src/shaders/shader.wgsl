// Vertex shader

struct VertexOutput {
    @builtin(position) clip_position: vec4<f32>,
    @location(0) position: vec2<f32>,
};

@vertex
fn vs_main(
    @builtin(vertex_index) in_vertex_index: u32,
) -> VertexOutput {
    var out: VertexOutput;
    if in_vertex_index == u32(0) {
        out.clip_position = vec4<f32>(-1.0, -1.0, 0.0, 1.0);
        out.position = vec2<f32>(-1.0, -1.0);
    } else if in_vertex_index == u32(1) {
        out.clip_position = vec4<f32>(3.0, -1.0, 0.0, 1.0);
        out.position = vec2<f32>(3.0, -1.0);
    } else {
        out.clip_position = vec4<f32>(-1.0, 3.0, 0.0, 1.0);
        out.position = vec2<f32>(-1.0, 3.0);
    }
    return out;
}

// Fragment shader
struct Camera {
    position: vec2<f32>,
    vertical_scale: f32,
    scale_factor: f32,
    vertical_resolution: vec4<f32>,
};

@group(0) @binding(0) var<uniform> camera: Camera;

//const samples = array<vec2<f32>, 100>(vec2<f32>(-0.036314471593556386, 0.4887589271704367), vec2<f32>(-0.028581610567769644, 0.21279537915262403), vec2<f32>(0.07984186039023355, -0.06503810069875482), vec2<f32>(-0.037860515173784304, -0.21129845388762303), vec2<f32>(0.39163430964237844, 0.06926413441537371), vec2<f32>(0.35287930544517443, -0.27446707632937195), vec2<f32>(0.1191069735897663, -0.3312748554284406), vec2<f32>(-0.4200245391005337, -0.26583865036296905), vec2<f32>(-0.4806508527753641, -0.13196638260807192), vec2<f32>(-0.19959973928733277, 0.30128413205312987), vec2<f32>(0.45163231462819575, -0.2671469880043491), vec2<f32>(0.37369480992041826, -0.2344359735338606), vec2<f32>(-0.19446002771974857, -0.3099598313474916), vec2<f32>(-0.3927456488687753, -0.4358965419427816), vec2<f32>(-0.35829648876369524, -0.3154435954096577), vec2<f32>(0.26344725263620217, -0.061733732156035614), vec2<f32>(-0.2614325057108806, -0.23312884168356351), vec2<f32>(-0.3047034571033087, -0.38687449607855817), vec2<f32>(-0.47869247624034483, -0.49113619163001565), vec2<f32>(0.3541263266604797, -0.24006071989725375), vec2<f32>(0.24665090869632267, 0.3836872286040558), vec2<f32>(0.2795866059666401, -0.46372256655518385), vec2<f32>(0.393106522365434, -0.2262419091664185), vec2<f32>(-0.02775513352792225, -0.03469135098180076), vec2<f32>(-0.27203369987064163, -0.4666408147055663), vec2<f32>(0.12663476067423884, 0.37274127912191624), vec2<f32>(0.14419182834638078, 0.24614055285759373), vec2<f32>(0.1074096857050264, -0.23199716871858533), vec2<f32>(-0.1249496274859292, -0.35194293710981905), vec2<f32>(0.4513572033567015, -0.19731910647503326), vec2<f32>(-0.48664098167568137, -0.01750713323319375), vec2<f32>(-0.12495299158190454, -0.284678585429778), vec2<f32>(0.06686241883964561, 0.41792765121044506), vec2<f32>(-0.022204230916693435, 0.4367831625240588), vec2<f32>(0.3025026558940316, 0.23152871913110484), vec2<f32>(-0.059060558857852996, -0.11204414037715127), vec2<f32>(-0.15062999485552298, -0.07833600896355875), vec2<f32>(0.3323969004869427, -0.15230260145408114), vec2<f32>(-0.49323995480393834, 0.2737147255264405), vec2<f32>(-0.09208845842295177, -0.1708793043803114), vec2<f32>(0.47924888387646547, -0.47774228996652446), vec2<f32>(-0.42865358964135925, -0.1346950646250964), vec2<f32>(0.02309245177873187, 0.4726712408299838), vec2<f32>(0.48773102199707163, -0.19203265962642835), vec2<f32>(0.32986117441954876, 0.3951260998686885), vec2<f32>(0.15443895056377466, 0.19692586018420988), vec2<f32>(0.2091236038422173, -0.3675765502739152), vec2<f32>(0.446238915585764, 0.21260237062361398), vec2<f32>(0.3269570068038412, -0.10083069331267014), vec2<f32>(0.1393755075490999, -0.4052255889590104), vec2<f32>(-0.4621843881437915, -0.10487699431747544), vec2<f32>(-0.1823636397180073, 0.31028715999391454), vec2<f32>(0.228978236870909, 0.1812303848887875), vec2<f32>(0.21664933691817234, -0.16598485906061056), vec2<f32>(0.35724713977703626, 0.07393405041343937), vec2<f32>(-0.19583936375509525, -0.4548771846266533), vec2<f32>(-0.25211266553993483, 0.4869726899028881), vec2<f32>(0.039128456077285545, 0.4296180456812053), vec2<f32>(-0.4085954156965754, 0.18425364604211025), vec2<f32>(-0.34454731687467044, -0.4481186811502038), vec2<f32>(0.4237144558261263, 0.42408002548458557), vec2<f32>(0.4703241347898526, -0.4322237622136973), vec2<f32>(0.333651456101419, -0.06433813843352598), vec2<f32>(-0.13293726846311937, -0.4540497041432092), vec2<f32>(-0.28636657950832634, -0.3341082759788889), vec2<f32>(-0.2987187207673321, -0.007600638060038856), vec2<f32>(0.12478596833404221, -0.2196296850130368), vec2<f32>(0.2474373272692778, 0.42786785498270574), vec2<f32>(0.2342026329443978, -0.4408738831902572), vec2<f32>(-0.09181129522186016, -0.42313087507981706), vec2<f32>(-0.3337895975465499, 0.10134611807850669), vec2<f32>(-0.40313681369002263, -0.1572513926909338), vec2<f32>(-0.2446076872160532, -0.39658128845624896), vec2<f32>(0.14386786416032749, -0.029057999115644106), vec2<f32>(0.2638209353536529, -0.09243271129657527), vec2<f32>(0.25321153985410927, 0.2428777686911614), vec2<f32>(0.49717349306794856, 0.3342247929209521), vec2<f32>(0.1840287075645144, -0.11336556209513393), vec2<f32>(0.17589419682862006, 0.2678062264896881), vec2<f32>(0.3066574480940276, 0.25053972926464074), vec2<f32>(0.10076326032526772, -0.09343609341847636), vec2<f32>(0.1449305661598821, 0.2371954807097818), vec2<f32>(0.1854943402003586, -0.31816270930058255), vec2<f32>(0.22680653917856275, 0.3459621201986598), vec2<f32>(-0.17358498597424155, -0.44701544661597015), vec2<f32>(0.0391874044348699, -0.4109287947764344), vec2<f32>(0.02047522210998709, -0.024273164669203595), vec2<f32>(-0.47095134383089654, -0.11460741010851327), vec2<f32>(0.49835864694885723, 0.4530163778435088), vec2<f32>(-0.427834665451998, 0.4265414146197568), vec2<f32>(0.35874868241790825, 0.37800939269359746), vec2<f32>(-0.33407103430951723, 0.22793730126878886), vec2<f32>(-0.15316628260773424, 0.3054724716470658), vec2<f32>(-0.4877555278591199, -0.21722171479838082), vec2<f32>(0.47840833382504466, -0.3770448321071955), vec2<f32>(0.049721455064175135, -0.2359104645955592), vec2<f32>(0.16316475365019167, 0.17983882099664483), vec2<f32>(0.022130842877280843, -0.28588667453237604), vec2<f32>(-0.44190324037779827, -0.3919223568170793), vec2<f32>(-0.28607281981781685, 0.4346699483619665));




fn get_brightness(position: vec2<f32>) -> f32 {
    let x0 = (position.x * camera.vertical_scale * camera.scale_factor) + camera.position.x;
    let y0 = (position.y * camera.vertical_scale) + camera.position.y;

    var x = 0.0;
    var y = 0.0;

    var x2 = 0.0;
    var y2 = 0.0;

    var iteration = 0;
    let max_iteration = 2000;

    loop {
        if x2 + y2 <= 4.0 && iteration < max_iteration {
            y = (x + x) * y + y0;
            x = x2 - y2 + x0;
            x2 = x * x;
            y2 = y * y;
            iteration += 1;
        } else {
            break;
        }
    }

    return f32(iteration) / f32(max_iteration);
}

@fragment
fn fs_main(in: VertexOutput) -> @location(0) vec4<f32> {
    //var brightness = get_brightness(in.position);
    var brightness = 0.0;

    if true {

        //let num_samples = 8;

        let y_offset: f32 = (1.0 / (camera.vertical_resolution[0] / 2.0)) / 3.0;
        let x_offset: f32 = y_offset / camera.scale_factor;

        //for (var i: i32 = 0; i < num_samples; i++) {
        //    if i == 0 {brightness += get_brightness((in.position + vec2<f32>(samples[0].x * x_offset, samples[0].y * y_offset)));}
        //    if i == 1 {brightness += get_brightness((in.position + vec2<f32>(samples[1].x * x_offset, samples[1].y * y_offset)));}
        //    if i == 2 {brightness += get_brightness((in.position + vec2<f32>(samples[2].x * x_offset, samples[2].y * y_offset)));}
        //    if i == 3 {brightness += get_brightness((in.position + vec2<f32>(samples[3].x * x_offset, samples[3].y * y_offset)));}
        //   if i == 4 {brightness += get_brightness((in.position + vec2<f32>(samples[4].x * x_offset, samples[4].y * y_offset)));}
        //    if i == 5 {brightness += get_brightness((in.position + vec2<f32>(samples[5].x * x_offset, samples[5].y * y_offset)));}
        //    if i == 6 {brightness += get_brightness((in.position + vec2<f32>(samples[6].x * x_offset, samples[6].y * y_offset)));}
        //    if i == 7 {brightness += get_brightness((in.position + vec2<f32>(samples[7].x * x_offset, samples[7].y * y_offset)));}
        //}

        //brightness = brightness / f32(num_samples);



        brightness += get_brightness((in.position + vec2<f32>(x_offset, y_offset)));
        brightness += get_brightness((in.position + vec2<f32>(x_offset, -y_offset)));
        brightness += get_brightness((in.position + vec2<f32>(-x_offset, y_offset)));
        brightness += get_brightness((in.position + vec2<f32>(-x_offset, -y_offset)));

        brightness += get_brightness((in.position + vec2<f32>(0.0, y_offset)));
        brightness += get_brightness((in.position + vec2<f32>(0.0, -y_offset)));
        brightness += get_brightness((in.position + vec2<f32>(x_offset, 0.0)));
        brightness += get_brightness((in.position + vec2<f32>(-x_offset, 0.0)));

        brightness = (brightness / (9.0));
    }

    return vec4<f32>(brightness / 2.0, sin(brightness * 3.14159), sin(brightness * 3.14159), 1.0);
}